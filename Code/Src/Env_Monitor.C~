#include "Env_Monitor.h"

//////////

int Env_Monitor::fd = -1;

//////////

Env_Monitor::Env_Monitor()
{
  //sampling periond in second
  delay = 5*60;
  
  if((fd = open(IIC_Dev, O_RDWR)) < 0) throw "Failed to open the i2c bus";
  if(ioctl(fd, I2C_SLAVE, 0x76) < 0) throw "Failed to acquire bus access and/or talk to slave.";

  dev.dev_id = BME280_I2C_ADDR_PRIM;
  dev.intf = BME280_I2C_INTF;
  dev.read = user_i2c_read;
  dev.write = user_i2c_write;
  dev.delay_ms = user_delay_ms;

  rslt = bme280_init(&dev);
  cout << "BME280 Init Result is: " << (int)rslt << endl;

  /* Recommended mode of operation*/
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
  dev.settings.filter = BME280_FILTER_COEFF_16;
  dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;

  uint8_t settings_sel;
  settings_sel = BME280_OSR_PRESS_SEL;
  settings_sel |= BME280_OSR_TEMP_SEL;
  settings_sel |= BME280_OSR_HUM_SEL;
  settings_sel |= BME280_STANDBY_SEL;
  settings_sel |= BME280_FILTER_SEL;

  rslt = bme280_set_sensor_settings(settings_sel, &dev);
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
}//Env_Monitor::Env_Monitor()

//////////

Env_Monitor::~Env_Monitor()
{
}//Env_Monitor::~Env_Monitor()

//////////

void Env_Monitor::Run()
{
  int date_yesterday = -1;
    
  while(1)
    {
      /*getting time info.*/
      time_t current_time = time(NULL);
      struct tm* time_tm = localtime(&current_time);

      int date_today = time_tm->tm_mday;

      if(date_today!=date_yesterday)
	{
	  //close file for yesterday
	  if(fout.is_open())
	    {
	      fout.close();
	      
	      //submit to e-log
	      Submit_ELog();
	    }//if(fout.is_open())

	  //open file for today
	  int year = time_tm->tm_year + 1900;
	  int month = time_tm->tm_mon + 1;
	  int date = time_tm->tm_mday;

	  string name_today = to_string(year);
	  name_today += "_";
	  name_today += string(2 - to_string(month).length(), '0') + to_string(month);
	  name_today += "_";
	  name_today += string(2 - to_string(date).length(), '0') + to_string(date);

	  elog_subject = name_today;

	  name_today += ".dat";
	  name_today = "/Env_Data/" + name_today;

	  fout.open(name_today, std::ofstream::app);

	  name_yesterday = name_today;
	  date_yesterday = date_today;
	}//if(date_today!=date_yesterday)

      /*getting sensor data*/
      dev.delay_ms(delay*1000);

      struct bme280_data comp_data;
      rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);

      cout << time_tm->tm_hour << ":" << time_tm->tm_min << ":" << time_tm->tm_sec << "," << comp_data.temperature << "," << comp_data.pressure/100 << "," << comp_data.humidity << endl;
      fout << time_tm->tm_hour << ":" << time_tm->tm_min << ":" << time_tm->tm_sec << "," << comp_data.temperature << "," << comp_data.pressure/100 << "," << comp_data.humidity << endl;
    }
  
  return;
}//void Env_Monitor::Run() 

//////////

void Env_Monitor::Submit_ELog()
{
  string hostname = "147.46.50.23";
  string port = "31417";

  string command = "elog";

  //hostname
  command += " -h " + hostname;

  //port
  command += " -p " + port;

  //ssl
  command += " -s";

  //encoding
  command += " -n 1";

  //logbook
  command += " -l Env_Monitoring_UoS_UndLab";

  //ID and passward
  command += " -u Sensor Sensor";

  //author
  command += " -a Author=Env_Monitor";

  //subject
  command += " -a Subject=" + elog_subject;

  //type
  command += " -a type=Monitoring";

  //message
  command += " -m " + name_yesterday;

  //cout << command << endl;
  system(command.c_str());
  
  return;
}//void Env_Monitor::Submit_Elog()

//////////

void Env_Monitor::user_delay_ms(uint32_t period)
{
  usleep(period*1000);

  return;
}//void user_delay_ms(uint32_t period)

//////////

int8_t Env_Monitor::user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
  write(fd, &reg_addr,1);
  read(fd, data, len);

  return 0;
}//int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)

//////////

int8_t Env_Monitor::user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
  int8_t*buf = new int8_t[len+1];
  buf[0] = reg_addr;
  memcpy(buf+1, data, len);
  write(fd, buf, len +1);

  delete[] buf;

  return 0;
}//int8_t Env_Monitor::user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)

//////////
